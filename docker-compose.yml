services:
  client:
    container_name: healthcheck-client
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        BUILDPLATFORM: ${BUILDPLATFORM:-linux/arm64}
        TARGETPLATFORM: ${TARGETPLATFORM:-linux/arm64}
    platform: ${TARGETPLATFORM:-linux/arm64}
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 30s


  api:
    container_name: healthcheck-api
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        BUILDPLATFORM: ${BUILDPLATFORM:-linux/arm64}
    platform: ${TARGETPLATFORM:-linux/arm64}
    expose:
      - "8000"
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/healthcheck
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  db:
    container_name: healthcheck-db
    build:
      context: ./db
      dockerfile: Dockerfile
    platform: ${TARGETPLATFORM:-linux/arm64}
    expose:
      - "5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=healthcheck
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=md5
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d healthcheck"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  proxy:
    container_name: healthcheck-proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    platform: ${TARGETPLATFORM:-linux/arm64}
    ports:
      - "80:80"
    depends_on:
      client:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  monitor:
    container_name: healthcheck-monitor
    build:
      context: ./monitor
      dockerfile: Dockerfile
    platform: ${TARGETPLATFORM:-linux/arm64}
    expose:
      - "9090"
    depends_on:
      - api
      - client
      - db
      - proxy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  app-network:
    name: healthcheck-network
    driver: bridge

volumes:
  db-data:
    name: healthcheck-db-data
