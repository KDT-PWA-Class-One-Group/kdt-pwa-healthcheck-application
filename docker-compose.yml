x-common: &common-variables
  DOCKER_DEFAULT_PLATFORM: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
  DOCKER_REGISTRY: ${DOCKER_REGISTRY:-ghcr.io}
  DOCKER_NAMESPACE: ${GITHUB_ORGANIZATION}
  IMAGE_TAG: ${IMAGE_TAG:-latest}
  TZ: ${TZ:-Asia/Seoul}

services:
  db:
    image: postgres:14.6
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    restart: unless-stopped
    container_name: healthcheck-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - type: volume
        source: db_data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./db/logs
        target: /var/log/postgresql
        consistency: cached
      - type: bind
        source: ./db/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          memory: 512M
    shm_size: '256mb'

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/healthcheck-api:${IMAGE_TAG}
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    restart: unless-stopped
    container_name: healthcheck-api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV:-production}
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - type: bind
        source: ./api/logs
        target: /app/logs
        consistency: cached
    networks:
      - backend
      - frontend
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${API_PORT:-8000}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 256M

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/healthcheck-client:${IMAGE_TAG}
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    restart: unless-stopped
    container_name: healthcheck-client
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-/api}
      PORT: ${CLIENT_PORT:-3000}
      HOSTNAME: "0.0.0.0"
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - type: bind
        source: ./client/logs
        target: /app/logs
        consistency: cached
    expose:
      - "${CLIENT_PORT:-3000}"
    networks:
      - frontend
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:${CLIENT_PORT:-3000} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 256M

  proxy:
    build: ./proxy
    image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/healthcheck-proxy:${IMAGE_TAG}
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    restart: unless-stopped
    container_name: healthcheck-proxy
    ports:
      - "${PROXY_PORT:-80}:80"
    networks:
      - frontend
      - backend
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
        consistency: cached
      - type: bind
        source: ./proxy/conf.d
        target: /etc/nginx/conf.d
        read_only: true
        consistency: cached
      - type: bind
        source: ./proxy/logs
        target: /var/log/nginx
        consistency: cached
    depends_on:
      api:
        condition: service_healthy
      client:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M

networks:
  frontend:
    name: healthcheck-frontend
    internal: false
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: frontend_net
  backend:
    name: healthcheck-backend
    internal: true
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: backend_net

volumes:
  db_data:
    name: healthcheck-db-data
  logs:
    name: healthcheck-logs
