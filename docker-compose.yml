services:
  # Core Services
  db:
    image: postgres:14
    platform: ${TARGETPLATFORM:-linux/amd64}
    container_name: healthcheck-db
    environment:
      POSTGRES_DB: healthcheck
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: ./api
    platform: ${TARGETPLATFORM:-linux/amd64}
    container_name: healthcheck-api
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/healthcheck
    expose:
      - "8000"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, json; response = urllib.request.urlopen('http://localhost:8000/health'); data = json.loads(response.read()); exit(0 if data.get('status') == 'healthy' else 1)"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always

  client:
    build: ./client
    platform: ${TARGETPLATFORM:-linux/amd64}
    container_name: healthcheck-client
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/api
    expose:
      - "3000"
    networks:
      - frontend
      - backend
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped

  core_proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: healthcheck-core-proxy
    ports:
      - "80:80"
    networks:
      - frontend
      - backend
    depends_on:
      - api
      - client
    restart: unless-stopped
    volumes:
      - ./proxy/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - core_nginx_temp:/var/cache/nginx
      - core_nginx_run:/tmp/nginx
    user: nginx

  # Monitoring Services (Optional)
  monitor:
    build: ./monitor
    container_name: healthcheck-monitor
    expose:
      - "3001"
    networks:
      - monitoring
      - backend  # 메트릭 수집을 위한 API 접근
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - METRICS_API_URL=http://api:8000/metrics
      - MONITOR_PORT=3001
      - CLIENT_URL=http://client:3000/api/health
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      api:
        condition: service_healthy

  monitor_proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: healthcheck-monitor-proxy
    ports:
      - "3001:3001"
    networks:
      - monitoring
    depends_on:
      - monitor
    restart: unless-stopped
    volumes:
      - ./proxy/conf.d/monitor.conf:/etc/nginx/conf.d/default.conf:ro
      - monitor_nginx_temp:/var/cache/nginx
      - monitor_nginx_run:/tmp/nginx
    user: nginx

networks:
  frontend:
    name: healthcheck-frontend
    internal: false  # 외부 접근 허용
  backend:
    name: healthcheck-backend
    internal: true   # 내부 통신만 허용
  monitoring:
    name: healthcheck-monitoring
    internal: false  # 모니터링 서비스 외부 접근 허용

volumes:
  db_data:
    name: healthcheck-db-data
  core_nginx_temp:
    name: healthcheck-core-nginx-temp
  core_nginx_run:
    name: healthcheck-core-nginx-run
  monitor_nginx_temp:
    name: healthcheck-monitor-nginx-temp
  monitor_nginx_run:
    name: healthcheck-monitor-nginx-run
